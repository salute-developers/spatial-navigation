<pre class='metadata'>
Title: Spatial Navigation
Shortname: spatnav
Level: 1
Status: ED
Group: WICG
Repository: wicg/spatial-navigation
URL: http://wicg.github.io/spatial-navigation
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Editor: Florian Rivoal, Invited Expert, https://florian.rivoal.net
Abstract: This specification defines a general model for navigating the focus using the arrow keys,
	as well as related CSS and JavaScript features.
</pre>
<pre class="anchors">
spec: ui-events; urlPrefix: https://w3c.github.io/uievents/;
    type: event;
        text: keydown
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage;
    urlPrefix: interaction.html
        type: dfn;
            text: DOM anchor
            text: currently focused area of a top-level browsing context
    urlPrefix: dom.html
        type: dfn;
            text: the body element; url: #the-body-element-2
spec: dom; urlPrefix: https://dom.spec.whatwg.org/
    type: dfn;
        text: document element
</pre>

<h2 id="intro">
Introduction</h2>

Issue: Add general introduction about spatial (and sequential) navigation here,
probably borrowing a lot from the explainer.

As a general principle,
keyboard navigation,
and spatial navigation in particular,
should be possible to control without JavaScript;
declarative solutions are preferred,
and since spatial navigation depends on layout,
that means CSS is typically the right place to define
spatial navigation related features.
However, in the spirit of the <a href="https://github.com/extensibleweb/manifesto">Extensible Web Manifesto</a>,
we feel it is important to provide the right JavaScript primitives
to let authors experiment and explore the problem space.
More declarative features may be added later,
based on feedback and experience acquired through such JavaScript usage.

<h2 id=interaction>
Module interaction</h2>

This document depends on the Infra Standard. [[!infra]]

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in RFC 2119. [[!RFC2119]]

<h2 id=declarative>
Controlling spatial navigation through declarative means</h2>

<h3 id=activation>
Activating Spatial Navigation: the 'arrow-key-behavior' property</h3>

Historically, most browsers have not offered features to let users move the focus directionally.
Some, such as TV browsers, have controlled spatial navigation using the arrow keys out of necessity,
since no other input mechanism is available on a typical TV remote control.

Others, have enabled different key combinations to control spatial navigation,
such as pressing the <code class=key>SHIFT</code> key together with arrow keys.

While arrow keys are well suited for this,
pressing them (on devices that have such keys)
has generally triggered other behavior,
such as scrolling.

The 'arrow-key-behavior' property enables an author to declare
that their document, or part of their document,
has been authored with spatial navigation in mind,
and the User Agent can bind the arrow keys to spatial navigation
without risk of interfering with other behavior.

<pre class='propdef'>
Name: arrow-key-behavior
Value: auto | focus-nav
Initial: auto
Inherited: yes
</pre>

Issue: This could also be named <code>spat-nav: auto | focus</code>,
or some other name. Bikeshedding welcome.

How spatial navigation is activated is determined by the value of the 'arrow-key-behavior' property
on the currently focused element,
or by the value on the root element if no element is focused.

Issue: How about iframes?
Also, should we start from the selection rather than from the root when no element is focused?
Does that depend on whether the selection is collapsed or not?

<dl dfn-for=arrow-key-behavior>
	<dt><dfn>auto</dfn>
	<dd>The User Agent defines which keys,
	if any, control spatial navigation.

	On devices such as TVs which do not have any pointing input device
	and which also lack a <code class=key>Tab</code> key to control
	<a herf="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">sequential focus navigation</a>,
	it is recommended that arrow keys be used for that purpose without any modifier key.
	On devices with a full keyboard,
	the User Agent may use a combination of arrow keys with a modifier key.

	<dt><dfn>focus-nav</dfn>
	<dd>The User Agent must trigger spatial navigation
	when the user presses arrow keys without modifier keys.

	Additionally, User Agents which allow spatial navigation to be controlled
	by keys other than arrow keys without a modifier key
	when the value of 'arrow-key-behavior' is auto
	must continue to do so.
</dl>

<h3 id=container>
Establishing focus navigation containers: the 'spatnav-container' property</h3>

While spatial navigation works from the the layout of the document
and the relative position of focusable elements
in general,
in some cases the User Agent needs to prioritize finding elements
from a local logical grouping,
only looking for focusable elements outside of the grouping
if a suitable one cannot be found inside it.

Such groupings are called <dfn lt="spatial navigation focus container | spatial navigation focus containers | spatnav container | spatnav containers">spatial navigation focus containers</dfn> (or <strong>spatnav containers</strong> for short),
and are controlled by the 'spatnav-container' property.

See [[#heuristic]] for details of how <a>spatial navigation focus containers</a>
affects which element gets focused.

<pre class='propdef'>
Name: spatnav-container
Value: auto | create
Initial: auto
Inherited: no
</pre>

<dl dfn-for=spatnav-container>
	<dt><dfn>auto</dfn>
	<dd>If the element is either
	the <a>document element</a> of a <a for="/">browsing context</a>'s <a>document</a>
	(not limited to the <a>top-level browsing context</a>)
	or
	a <a>scroll container</a>
	then it establishes a <a>spatial navigation focus container</a>,
	otherwise it does not.

	<dt><dfn>create</dfn>
	<dd>The element establishes a <a>spatial navigation focus container</a>
</dl>

<h2 id="js-api">
Controlling Spatial Navigation in JavaScript</h2>

<pre class=idl>
enum NavigationDirection { "up", "down", "left", "right", "prev", "next" };

dictionary FindFocusableOptions {
  required NavigationDirection dir;
};

partial interface Element {
  Element? findFocusable(FindFocusableOptions arg);
};

[Constructor(DOMString type, optional FocusNavigationEventInit eventInitDict)]
interface FocusNavigationEvent : UIEvent {
  readonly attribute NavigationDirection dir;
  readonly attribute EventTarget? relatedTarget;
};

dictionary FocusNavigationEventInit : UIEventInit {
  required NavigationDirection dir;
  EventTarget? relatedTarget = null;
};

</pre>

Calling {{findFocusable()}} on an element
allows the author to find which element would be focused, if any,
if the user were to attempt spatial (in the case of {{NavigationDirection/up}}, {{NavigationDirection/down}}, {{NavigationDirection/right}}, or {{NavigationDirection/left}})
or sequential (in the case of {{NavigationDirection/prev}} or {{NavigationDirection/next}})
navigation while that element has the focus.

Note: The way the direction is expressed allows us to expand to more than 4-way navigation
later of if this is found necessary.
More directional keywords or a numerical angle could be added.

<dl>
<dt>{{FocusNavigationEvent}} . {{FocusNavigationEvent/dir}}
<dd>The direction of the navigation initiated by the user
<dt>{{FocusNavigationEvent}} . {{FocusNavigationEvent/relatedTarget}}
<dd>The element to which the focus will be moved at the end of the event handler,
as determined by the <a>focus navigation heuristic</a>
</dl>

<h2 id=processing-model>
Processing Model</h2>

Note: This section is generally a monkey patch on other specs,
and should in the long term be integrated back into them.
This is all specified here for now in order to explore and incubate
this topic.

<h3 id=triggering>
Triggering Navigation</h3>

Issue: This section should be an extension of [[!UI-EVENTS]]'s processing model
(or a monkey-patch over it if it were not extensible),
but [[UI-EVENTS]] does not have a fully defined processing model.
It does define the events, but does not define the algorithm which
is supposed to dispatch them and respond to cancelation and so on.
Therefore, this is being written as a (rough sketch) of what that
model should be.
Once this is sufficiently detailed and tested, this should be turned into
a pull request against [[UI-EVENTS]].

Issue: Notwithstanding the previous issue, this is currently written
using insufficient detail and using insufficiently precise terminology.
This should be refined into a proper algorithm.


When the user presses a key on the keyboard,
the following steps are run to <dfn>react to key presses</dfn>.

<div algorithm="react to key presses">


1. Let <var>eventTarget</var> be the <a>DOM anchor</a> of the <a>currently focused area of a top-level browsing context</a>.
2. If <var>eventTarget</var> is the <a>Document</a> of the <a>top-level browsing context</a>
    set <var>eventTarget</var> to <a>the body element</a> if it is not <code>null</code> or
    to the <a>document element</a> otherwise.
1. <a>Fire an event</a> named <a event>keydown</a> at <var>eventTarget</var>
    using {{KeyboardEvent}} with its arguments initialized as per [[UI-EVENTS#event-type-keydown]]
    and let <var>actOnKeyPress</var> be the result.
2. If <var>actOnKeyPress</var> is <code>false</code>, return
3. If the element is an editing host or a descendent of one,
    then <br><span class=issue>… invoke beforeinput events, execcommand, input events,
     misery and pain…</span>
4. else if the key is .... and the modifiers are ..., then ....
5. else if the key is enter and the target has an activation behavior,
    then initiate that action and then return
    <span class=issue>… more of the same, handling all sorts of keys in various situations …</span>
6. else if the key is tab (or shift tab), invoke the part of HTML on
    sequential navigation
7. else, if the key is an arrow key

    1. if the target is a (form) control that reacts to arrow keys, do that then
        return (define a nice hook so that elements can be specified to eat arrow
        keys)
    2. else, if the target is scrollable and not scrolled to the max, scroll it
        (with appropriate references to CSSOM-View) then return
    3. [Insert spatnav here]
    4. else, if the nearest scrollable ancestor is not scrolled to the max,
        scroll that then return
    5. else recurse the previous step up the tree until you find a scrollable ancestor that
        can scroll or you hit the root

        Issue: This is how chrome does it, Firefox doesn't recurse

</div>


<h3 id=events>
Event Sequence</h3>

Issue: This section is a vague draft, that should be refined and incorporated into the previous section.

When the user performs an action that triggers spatial navigation
(typically pressing an arrow key),
the sequence is as follows:

<ol>
  <li>The corresponding UI Event (keydown in the case of arrow keys) gets dispatched

  <li>If the <a>canceled flag</a> is set, return

  <li>else,

    <ol>
      <li>if the focused element has some action associated with pressing that
          key (e.g. it is scrollable and pressing down makes it scroll down,
          or it is an editable element with a caret that can be moved), do
          that

      <li>else,
        <ol>
          <li>run the spatial navigation search algorithm,
              and let <var>candidate</var> be the result

          <li>dispatch a {{FocusNavigationEvent}} on the currently focused
              element, with <var>candidate</var> as the <a>relatedTarget</a>

          <li>if {{preventDefault()}} gets called, return

          <li>if <var>candidate</var> is not null,
            <ol>
              <li>Invoke the thing (what's that thing?) that will prevent
	          parents of the currently focused element to react to the
		  down key, such as scrolling if they are scrollers

              <li>run the <a>focusing steps</a> for <var>candidate</var>
            </ol>
        </ol>
    </ol>
</ol>

<h3 id=heuristic>
Focus Navigation Heuristic</h3>

When the user requests that move focus on the top-level browsing context,
the <dfn>focus navigation heuristic</dfn> runs these steps:

1. Find a spatial navigation <dfn>starting point</dfn>.

    1. If there is a currently focused area, it is the <a>starting point</a>.
    2. Otherwise, if there is a previously focused area, it is the <a>starting point</a>.
    3. Otherwise, among all the <a href="https://html.spec.whatwg.org/#focusable-area">focusable areas</a>,
		   the <a href="https://html.spec.whatwg.org/#focusable-area">focusable area</a> on the topmost and the leftmost in the current level of browsing context is
			 the <a>starting point</a>.

2. Move focus to the <a>starting point</a>.

3. Find <a>spatial navigation focus containers</a>.

    1. If the <a>starting point</a> has an ancestor element which is specified 'arrow-key-behavior' with the value of 'create',
		   then let <a>spatial navigation focus containers</a> be the ancestor element.
    2. Otherwise, if the <a>starting point</a> is in a <a>scroll container</a>, then
		   let <a>spatial navigation focus container</a> be the <a>scroll container</a>.
    3. Otherwise, let <a>spatial navigation focus containers</a> be the document element of a browsing context.

4. Get the <var>direction</var> of the spatial navigation.

    1. If the right arrow key is pressed, let <var>direction</var> is rightward.
    2. Otherwise, if the left arrow key is pressed, let <var>direction</var> is leftward.
    3. Otherwise, if the up arrow key is pressed, let <var>direction</var> is upward.
    4. Otherwise, if the down arrow key is pressed, let <var>direction</var> is downward.

5. Let the <dfn>focus target</dfn> be the result of running the <a>spatial navigation search algorithm</a> with
<a>starting point</a> and <var>direction</var>.

6. Move focus to the <a>focus target</a>.

Issue: How can arrow keys behave when the <a>spatial navigation focus container</a> is a <a>scroll container</a>?

The <dfn>spatial navigation search algorithm</dfn> consists of the following steps.

This algorithm takes two arguments: <a>starting point</a> and <var>direction</var>.

Note: The <a href="https://html.spec.whatwg.org/#focusable-area">focusable area</a> which is overlapped
by another <a href="https://html.spec.whatwg.org/#focusable-area">focusable area</a> is also a candidate.

1. Find candidates which satisfy the conditions below:
		* It should be a <a href="https://html.spec.whatwg.org/#focusable-area">focusable area</a>.
		* It should be visible within the viewport.
		* It should be a child element of the <a>spatial navigation focus container</a>.
		* The position of the center point of it should be in <var>D</var> direction
							of that of the <a>starting point</a>.
		* The position value of the edge of it should be in <var>D</var> direction
							of that of the <a>starting point</a>.

2. If candidates are not null, then find the <a>focus target</a>.

    1. Find the combination of the vertex on the <a>starting point</a> and the vertex on the
		    candidate which makes the shortest distance between two vertices.

		    * Select <var>vertex V1</var> from the <a>starting point</a>.
		    * Select <var>vertex V2</var> from the candidate.

    2. Calculate the <a>distance</a> between <var>vertex V1</var> and <var>vertex V2</var> for each candidate.

		    The Distance function is:

		    <dfn>distance</dfn> = <var>A</var> + <var>B</var> + <var>C</var> - <var>D</var></code>

		    Note: This refers to the <a href="https://www.w3.org/TR/WICD/#focus-handling">old WICD Spec</a>

		    <var>A</var> : The euclidian distance between <var>vertex V1</var> and <var>vertex V2</var>.

		    <var>B</var> : The absolute distance in the navigation direction between <var>vertex V1</var> and
				<var>vertex V2</var>.

		    <var>C</var> : The absolute distance in the direction which is orthogonal to the navigation
				direction between <var>vertex V1</var> and <var>vertex V2</var>.

		    <var>D</var> : The square root of the overlapped area between the candidate and the
				<a>starting point</a>.

    3. Select the element which distance is the least among the candidates.

3. Otherwise, then let the <a>focus target</a> be the <a>starting point</a>.

4. Return the <a>focus target</a>.

The <a>focus navigation heuristic</a> determines which element should be focused next
when the user invokes either spatial or sequential navigation.

Issue: Add the details. Link to HTML for the logic on sequential navigation.
