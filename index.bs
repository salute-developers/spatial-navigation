<pre class='metadata'>
Title: Spatial Navigation
Shortname: spatnav
Level: 1
Status: ED
Group: WICG
Repository: wicg/spatial-navigation
URL: http://wicg.github.io/spatial-navigation
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Editor: Florian Rivoal, Invited Expert, https://florian.rivoal.net
Abstract: This specification defines a general model for navigating the focus using the arrow keys,
	as well as related CSS and JavaScript features.
</pre>

<h2 id="intro">
Introduction</h2>

Issue: Add general introduction about spatial (and sequential) navigation here,
probably borrowing a lot from the explainer.

As a general principle,
keyboard navigation,
and spatial navigation in particular,
should be possible to control without JavaScript;
declarative solutions are preferred,
and since spatial navigation depends on layout,
that means CSS is typically the right place to define
spatial navigation related features.
However, in the spirit of the <a href="https://github.com/extensibleweb/manifesto">Extensible Web Manifesto</a>,
we feel it is important to provide the right JavaScript primitives
to let authors experiment and explore the problem space.
More declarative features may be added later,
based on feedback and experience acquired through such JavaScript usage.

<h2 id=activation>
Activating Spatial Navigation: the 'arrow-key-behavior' property</h2>

Historically, most browsers have not offered features to let users move the focus directionally.
Some, such as TV browsers, have controlled spatial navigation using the arrow keys out of necessity,
since no other input mechanism is available on a typical TV remote control.

Others, have enabled different key combinations to control spatial navigation,
such as pressing the <code class=key>SHIFT</code> key together with arrow keys.

While arrow keys are well suited for this,
pressing them (on devices that have such keys)
has generally triggered other behavior,
such as scrolling.

The 'arrow-key-behavior' property enables an author to declare
that their document, or part of their document,
has been authored with spatial navigation in mind,
and the User Agent can bind the arrow keys to spatial navigation
without risk of interfering with other behavior.

<pre class='propdef'>
Name: arrow-key-behavior
Value: auto | focus-nav
Initial: auto
Inherited: yes
</pre>

Issue: This could also be named <code>spat-nav: auto | focus</code>,
or some other name. Bikeshedding welcome.

How spatial navigation is activated is determined by the value of the 'arrow-key-behavior' property
on the currently focused element,
or by the value on the root element if no element is focused.

Issue: How about iframes?
Also, should we start from the selection rather than from the root when no element is focused?
Does that depend on whether the selection is collapsed or not?

<dl dfn-for=arrow-key-behavior>
	<dt><dfn>auto</dfn>
	<dd>The User Agent defines which keys,
	if any, control spatial navigation.

	On devices such as TVs which do not have any pointing input device
	and which also lack a <code class=key>Tab</code> key to control
	<a herf="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">sequential focus navigation</a>,
	it is recommended that arrow keys be used for that purpose without any modifier key.
	On devices with a full keyboard,
	the User Agent may use a combination of arrow keys with a modifier key.

	<dt><dfn>focus-nav</dfn>
	<dd>The User Agent must trigger spatial navigation
	when the user presses arrow keys.

	Additionally, User Agents which allow spatial navigation to be controlled
	by keys other than arrow keys without a modifier key
	when the value of 'arrow-key-behavior' is auto
	must continue to do so.
</dl>


<h2 id="js-api">
Controlling Spatial Navigation in JavaScript</h2>

<pre class=idl>
enum NavigationDirection { "up", "down", "left", "right", "prev", "next" };

dictionary FindFocusableOptions {
  required NavigationDirection dir;
};

partial interface Element {
  Element? findFocusable(FindFocusableOptions arg);
};

[Constructor(DOMString type, optional FocusNavigationEventInit eventInitDict)]
interface FocusNavigationEvent : UIEvent {
  readonly attribute NavigationDirection dir;
  readonly attribute EventTarget? relatedTarget;
};

dictionary FocusNavigationEventInit : UIEventInit {
  required NavigationDirection dir;
  EventTarget? relatedTarget = null;
};

</pre>

Calling {{findFocusable()}} on an element
allows the author to find which element would be focused, if any,
if the user were to attempt spatial (in the case of {{NavigationDirection/up}}, {{NavigationDirection/down}}, {{NavigationDirection/right}}, or {{NavigationDirection/left}})
or sequential (in the case of {{NavigationDirection/prev}} or {{NavigationDirection/next}})
navigation while that element has the focus.

Note: The way the direction is expressed allows us to expand to more than 4-way navigation
later of if this is found necessary.
More directional keywords or a numerical angle could be added.

<dl>
<dt>{{FocusNavigationEvent}} . {{FocusNavigationEvent/dir}}
<dd>The direction of the navigation initiated by the user
<dt>{{FocusNavigationEvent}} . {{FocusNavigationEvent/relatedTarget}}
<dd>The element to which the focus will be moved at the end of the event handler,
as determined by the <a>focus navigation heuristic</a>
</dl>

<h2 id=processing-model>
Processing Model</h2>

<h3 id=events>
Event Sequence</h3>

When the user performs an action that triggers spatial navigation
(typically pressing an arrow key),
the sequence is as follows:

* The corresponding UI event is fired
* If `preventDefault()` is not called during that event handler, then

    * Find where the focus should go, based on the <a>focus navigation heuristic</a>
    * `FocusNavigationEvent` event is fired
    * If `preventDefault()` is not called during that event's handler, the element is focused, as if the `focus()` method had been called on it.

<h3 id=heuristic>
Focus Navigation Heuristic</h3>

The <dfn>focus navigation heuristic</dfn> runs these steps:

1. Select the initially focused element.

    1. If there is a previously focused element, it is the initially focused element.
    2. Otherwise, among all the focusable areas, the element on the topmost and the leftmost in the
        current level of browsing context is the initially focused element.

2. Let the initially focused element be the currently focused element.

3. Move focus to the currently focused element.

4. Get the direction of the spatial navigation.

5. Find the candidate elements.

    Note: The element which is overlapped by the focused element is also the candidate element.

    1. If the up arrow key or the down arrow key is pressed, <var>axis A</var> is Y. Otherwise, the left
        arrow key or the right arrow key is pressed, <var>axis A</var> is X.
    2. If the right arrow key or the down arrow key is pressed, <var>direction D</var> is positive.
        Otherwise, the left arrow key or the up arrow key is pressed, <var>direction D</var> is negative.
    3. Find the candidate elements which satisfy the conditions below:
        * The element should be focusable.
        * The element should be visible within the viewport.
        * The position of the center point of the element should be greater than that of the currently focused
            element in <var>direction D</var> on <var>axis A</var>.
        * The position value of the edge in the navigation direction of the element should be greater than
            that of the currently focused element in <var>direction D</var> on <var>axis A</var>.

6. Find the next focused element.

    1. Find the combination of the vertex on the currently focused element and the vertex on the
        candidate element which makes the shortest distance between two vertices.

        * Select <var>vertex V1</var> from the currently focused element.
        * Select <var>vertex V2</var> from the candidate element.


    2. Calculate the distance between <var>vertex V1</var> and <var>vertex V2</var> for each candidate
        element.
        The Distance function is:

        <dfn>distance</dfn> = <var>A</var> + <var>B</var> + <var>C</var> - <var>D</var></code>

        Note: This refers to the <a href="https://www.w3.org/TR/WICD/#focus-handling">old WICD Spec</a>

        <var>A</var> : The euclidian distance between <var>vertex V1</var> and <var>vertex V2</var>.

        <var>B</var> : The absolute distance in the navigation direction between <var>vertex V1</var> and
            <var>vertex V2</var>.

        <var>C</var> : The absolute distance in the direction which is orthogonal to the navigation
            direction between <var>vertex V1</var> and <var>vertex V2</var>.

        <var>D</var> : The square root of the overlapped area between the candidate element and the
            currently focused element.

    3. Select the element which distance is the least among the candidate elements.

7. Move focus to the next focused element.

The <a>focus navigation heuristic</a> determines which element should be focused next
when the user invokes either spatial or sequential navigation.

Issue: Add the details. Link to HTML for the logic on sequential navigation.

</div>
