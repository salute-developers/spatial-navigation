<pre class='metadata'>
Title: Spatial Navigation
Shortname: spatnav
Level: 1
Status: ED
Group: WICG
Repository: wicg/spatial-navigation
URL: http://wicg.github.io/spatial-navigation
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Editor: Florian Rivoal, Invited Expert, https://florian.rivoal.net
Abstract: This specification defines a general model for navigating the focus using the arrow keys,
	as well as related CSS and JavaScript features.
</pre>
<pre class="anchors">
spec: ui-events; urlPrefix: https://w3c.github.io/uievents/;
    type: event;
        text: keydown
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/;
    urlPrefix: interaction.html
        type: dfn;
            text: DOM anchor
            text: focusable area
            text: currently focused area of a top-level browsing context
            text: sequential focus navigation order
    urlPrefix: dom.html
        type: dfn;
            text: the body element; url: #the-body-element-2
spec: dom; urlPrefix: https://dom.spec.whatwg.org/
    type: dfn;
        text: document element
spec: overscroll-behavior; urlPrefix: https://wicg.github.io/overscroll-behavior/;
    type: dfn;
        text: scroll boundary
spec: css2; urlPrefix: https://drafts.csswg.org/css2/
    urlPrefix: box.html
        type: dfn;
            text: border box; url: #x14
</pre>
<style>
code.key {
  border: solid 1px;
  border-radius: 0.5ch;
  padding: 1px 5px;
}
</style>

<h2 id="intro" class=non-normative>
Introduction</h2>

<em>This section is not normative.</em>

Historically, most browsers have not offered features to let users move the focus directionally.
Some, such as TV browsers, have enabled users to move the focus using the arrow keys out of necessity,
since no other input mechanism is available on a typical TV remote control.

Others, have enabled different key combinations to control spatial navigation,
such as pressing the <code class=key>Shift</code> key together with arrow keys.

This ability to move around the page directionally is called <dfn lt="spatial navigation | spatnav" export>spatial navigation</dfn>
(or <strong>spatnav</strong> for short).

While arrow keys are naturally suited to control spatial navigation,
pressing them (on devices that have such keys)
has generally triggered other behavior,
such as scrolling.
This specification introduces CSS properties and Javascript APIs
enabling authors to turn on spatial navigation using arrow keys
and to control its behavior.

Some aspects of this specification, such as the Javascript Events,
also extent how sequential navigation work,
in order to make sure that keyboard navigation in general
has a consistent and well defined model.

Note: As a general principle,
keyboard navigation,
and spatial navigation in particular,
should be possible to control without JavaScript,
and declarative solutions are therefore preferred.
Since spatial navigation depends on layout,
that means CSS is typically the right mechanism to define
spatial navigation related controls.
However, in the spirit of the <a href="https://github.com/extensibleweb/manifesto">Extensible Web Manifesto</a>,
we feel it is important to provide the right JavaScript primitives
to let authors experiment and explore the problem space.
More declarative features may be added later,
based on feedback and experience acquired through such JavaScript usage.


<h2 id=interaction>
Module interaction</h2>

This document depends on the Infra Standard [[!infra]].

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in RFC 2119. [[!RFC2119]]


<h2 id=overview class=non-normative>
Overview</h2>

<em>This section is not normative.</em>

When spatial navigation is <a for=spatnav>active</a>,
pressing an arrow key will either
move the focus from its current location to a new focusable item in the direction requested,
or scroll if there is no appropriate item.

More specifically,
the User Agent will first search for visible and focusable items
in the direction indicated
within the current <a>spatial navigation focus container</a>
(by default the root element, scrollable elements, and iframes,
but other elements can be made into <a>spatial navigation focus containers</a>
using the 'spatnav-container' property).

If it finds any, it will pick the best one for that direction,
and move the focus there.

If it does not, it will scroll the <a>spatial navigation focus container</a> in the requested direction
instead of moving focus.
Doing so may uncover focusable elements
which would then be eligible targets to move the focus to
next time spatial navigation in the same direction is requested.

If the <a>spatial navigation focus container</a> cannot be scrolled,
either because it is not a scrollable element
or because it is already scrolled to the maximum in that direction,
the User Agent will select the next <a>spatial navigation focus container</a> up the ancestry chain,
and repeat the process of
looking for eligible focus targets,
selecting the best one if there's any,
scrolling if not,
going up the ancestry chain if it cannot scroll,
until it has either moved focus,
scrolled,
or reached the root.

At key points during this search for the appropriate response to the spatial navigation request,
the User Agent will fires events.
These enable authors to prevent the upcoming action
(by calling {{preventDefault()}}),
and if desired to provide an alternate action,
such as using calling the {{HTMLElement/focus()}} method on a different
element of the author's choosing.

The following table summarizes the events that may be sent:

<table class="complex data">
  <thead>
    <tr>
      <td colspan=2></td>
      <th colspan=2>Attributes of the event
    <tr>
      <th>Event type
      <th>Description
      <th>{{NavigationEvent/dir}}
      <th>{{NavigationEvent/relatedTarget}}
  </thead>
  <tbody>
    <tr>
      <td><dfn event for=NavigationEvent>navbeforefocus</dfn>
      <td>Fired before spatial or <a href="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">sequential</a> navigation changes the focus.
      <td rowspan=3>The intended direction of the navigation as requested by the user
      <td>The <a>DOM anchor</a> of the <a>focusable area</a> that will be focused
    <tr>
      <td><dfn event for=NavigationEvent>navbeforescroll</dfn>
      <td>Fired before spatial navigation triggers scrolling
      <td>The element that will be scrolled
    <tr>
      <td><dfn event for=NavigationEvent>navnotarget</dfn>
      <td>Fired when spatial navigation has failed to find any acceptable candidate to move the focus to
          in the current <a>spatnav container</a>
          and when that same <a>spatnav container</a> cannot be scrolled either,
          before going up the tree to search in the nearest ancestor <a>spatnav container</a>.
      <td>The <a>spatnav container</a> that was searched in.
  </tbody>
</table>

<h3 id=press-arrow-keys>
Pressing the arrow keys</h3>

<div class='example'>
This example shows how spatial navigation works on the scroll region.

	<pre class="lang-css">
		#scroller {
			width: 700px;
			height: 700px;
			overflow-x: hidden;
			overflow-y: auto;
			spatial-navigation: active;
		}

		.box {
			width: 150px;
			height: 110px;
			background-color: blue;
		}

		.box:focus {
			background-color: red;
		}
	</pre>
	<pre class="lang-html">
		&lt;div id="scroller">
			&lt;div class="box" tabindex="0">Box 1&lt;/div>
			&lt;div class="box" tabindex="0">Box 2&lt;/div>
			&lt;div class="box" tabindex="0">Box 3&lt;/div>
			&lt;div class="box" tabindex="0">Box 4&lt;/div>
		&lt;/div>
	</pre>
	<figure>
		<img alt="An image about enabling spatnav using active value" src="images/scroll-spatnav1.png" style="width: 200px;"/>
		<img alt="An image about enabling spatnav using active value" src="images/scroll-spatnav2.png" style="width: 200px;"/>
		<figcaption>Moving focus to the visible element in the <a>scroll container</a>.</figcaption>
	</figure>
	On the left, the "Box 2" element gains focus. After pressing the <code class=key>"ArrowDown"</code> key, focus moves to
	the "Box 3" element without scrolling because the "Box 3" element is entirely in the "scroller" element's <a>scrollport</a>.
	<figure>
		<img alt="An image about enabling spatnav using active value" src="images/scroll-spatnav2.png" style="width: 200px;"/>
		<img alt="An image about enabling spatnav using active value" src="images/scroll-spatnav3.png" style="width: 200px;"/>
		<img alt="An image about enabling spatnav using active value" src="images/scroll-spatnav4.png" style="width: 200px;"/>
		<figcaption>Moving focus to the hidden element in the <a>scroll container</a>.</figcaption>
	</figure>
	On the left, the "Box 3" element gains focus, but there isn't any focusable element in the <a>scrollport</a>.
	When pressing the <code class=key>"ArrowDown"</code> key, the scrollbar moves until any focusable element comes
	into the <a>scrollport</a>.
	When the "Box 4" element is visible, it will gain focus.
</div>

<h2 id=declarative>
Controlling spatial navigation through declarative means</h2>

<h3 id=activation>
Activating Spatial Navigation: the 'spatial-navigation' property</h3>

Spatial navigation is said to be <dfn for=spatnav>available</dfn>
when there is a mechanism available to the user to invoke spatial navigation.

Spatial navigation is said to be <dfn for=spatnav>active</dfn> on an element
when the user can invoke spatial navigation
by pressing the arrow keys without modifier keys
when that element is focused.

The 'spatial-navigation' property enables the author to declare
that their document, or part of their document,
has been authored with spatial navigation in mind,
and the User Agent can make spatial navigation <a for=spatnav>active</a>
without risk of interfering with other behavior.

<pre class='propdef'>
Name: spatial-navigation
Value: auto | active
Initial: auto
Inherited: yes
</pre>


<dl dfn-for=spatial-navigation dfn-type=value>
	<dt><dfn>auto</dfn>
	<dd>The User Agent defines
	whether spatial navigation is <a>available</a>,
	and if so, which UI mechanisms may trigger the <a>spatial navigation steps</a>
	(e.g. certain key combinations, gestures, buttons in the UI, voice commands…).

	On devices which do not have any pointing input device,
	and especially on devices such as TVs which also lack a <code class=key>Tab</code> key to control
	<a herf="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">sequential focus navigation</a>,
	User Agents should make spatial navigation <a>active</a>.

	<dt><dfn>active</dfn>
	<dd>The User Agent must make spatial navigation <a>active</a>
	on the element.

	Additionally, User Agents which make spatial navigation <a>available</a>
	by other mechanisms
	when the value of 'spatial-navigation' is ''spatial-navigation/auto''
	must continue to do so.
</dl>

<div class='example'>
Spatial navigation is useful for the grid type layout. This example builds a document that spatial navigation is available
on the part of it. This allows the arrow keys to move focus among the elements which are in the <a>scroll container</a>.

	<pre class="lang-css">
		#scroller {
			 width: 600px;
			 height: 400px;
			 overflow-y: scroll;
			 spatial-navigation: active;
		}

		.box {
			 width: 150px;
			 height: 110px;
		}
	</pre>
	<pre class="lang-html">
	  &lt;div id="root">
			&lt;div id="mainMenu">
			  &lt;button>Button 1&lt;/button>
			  &lt;button>Button 2&lt;/button>
			  &lt;button>Button 2&lt;/button>
			&lt;/div>
			&lt;div id="sideMenu">
			  &lt;a class="index" href="#link1" target="_self">Link 1&lt;/a>
			  &lt;a class="index" href="#link2" target="_self">Link 2&lt;/a>
			  &lt;a class="index" href="#link3" target="_self">Link 3&lt;/a>
			  &lt;a class="index" href="#link4" target="_self">Link 4&lt;/a>
			  &lt;a class="index" href="#link5" target="_self">Link 5&lt;/a>
			&lt;/div>
			&lt;div id="scroller">
				&lt;div class="box" tabindex="0">&lt;/div>
				&lt;div class="box" tabindex="0">&lt;/div>
				&lt;div class="box" tabindex="0">&lt;/div>
				&lt;div class="box" tabindex="0">&lt;/div>
				&lt;div class="box" tabindex="0">&lt;/div>
				&lt;div class="box" tabindex="0">&lt;/div>
			&lt;/div>
		&lt;/div>
	</pre>
	<figure>
		<img alt="An image about enabling spatnav using active value" src="images/spatnav-enable.png" style="width: 500px;"/>
		<figcaption>The scroll region activated for spatial navigation.</figcaption>
	</figure>
</div>

<h3 id=container>
Establishing focus navigation containers: the 'spatnav-container' property</h3>

While spatial navigation works from the layout of the document
and the relative position of focusable elements
in general,
in some cases the User Agent needs to prioritize finding elements
from a local logical grouping,
only looking for focusable elements outside of the grouping
if a suitable one cannot be found inside it.

Such groupings are called <dfn lt="spatial navigation focus container | spatial navigation focus containers | spatnav container | spatnav containers">spatial navigation focus containers</dfn> (or <strong>spatnav containers</strong> for short),
and are controlled by the 'spatnav-container' property.

<pre class='propdef'>
Name: spatnav-container
Value: auto | create
Initial: auto
Inherited: no
</pre>

Issue: Bikeshedding: Are we OK with abbreviations?
Should this be spatial-navigation-container?
Is that too long, or does it make it seem like a longhand?
Should we go with navigation-container instead?
Doesn't that suggest it would do something for sequential navigation too?


<dl dfn-for=spatnav-container dfn-type=value>
	<dt><dfn>auto</dfn>
	<dd>If the element is either
	the <a>document element</a> of a <a for="/">browsing context</a>'s <a>document</a>
	(not limited to the <a>top-level browsing context</a>)
	or
	a <a>scroll container</a>
	then it establishes a <a>spatial navigation focus container</a>,
	otherwise it does not.

	<dt><dfn>create</dfn>
	<dd>The element establishes a <a>spatial navigation focus container</a>
</dl>

See [[#overview]] for a high level description of how <a>spatial navigation focus containers</a>
affects the behavior of spatial navigation,
and [[#processing-model]] for details.


<h2 id="js-api">
Javascript API</h2>

Note: The events and APIs described in this section relate both to spatial navigation
and to sequential navigation.

<pre class=idl>
enum NavigationDirection { "up", "down", "left", "right", "forward", "backward" };

[Constructor(DOMString type, optional NavigationEventInit eventInitDict)]
interface NavigationEvent : UIEvent {
  readonly attribute NavigationDirection dir;
  readonly attribute EventTarget? relatedTarget;
};

dictionary NavigationEventInit : UIEventInit {
  required NavigationDirection dir;
  EventTarget? relatedTarget = null;
};
</pre>

Note: The way the direction is expressed allows us to expand to more than 4-way navigation
later of if this is found necessary.
More directional keywords or a numerical angle could be added.

See [[#overview]] for a high level description of the various types of {{NavigationEvent}} which may be dispatched,
and [[#processing-model]] for details.

<pre class=idl>
dictionary FindFocusableOptions {
  required NavigationDirection dir;
};

partial interface Element {
  Element? findFocusable(FindFocusableOptions arg);
};
</pre>

Calling {{findFocusable()}} on an element
allows the author to find which element would be focused, if any,
if the user were to attempt spatial (in the case of {{NavigationDirection/up}}, {{NavigationDirection/down}}, {{NavigationDirection/right}}, or {{NavigationDirection/left}})
or sequential (in the case of {{NavigationDirection/forward}} or {{NavigationDirection/backward}})
navigation while that element has the focus.


<h2 id=processing-model>
Processing Model</h2>

The [[#overview]] section gives a high level idea of how spatial navigation works,
to help readers of this specification build a general mental model.
It uses intuitive but imprecise terminology,
and glosses over many details
for the sake of readability.

This section defines the corresponding normative behavior
and aims for as much detail as necessary
to fully define the behavior.
This include integration with sequential navigation.

Note: Much of section is monkey patches on other specs,
and should in the long term be integrated back into them.
This is all specified here for now in order to explore and incubate
this topic.

Issue: The following currently does not account
for <a href="https://github.com/WICG/overscroll-behavior">the proposed overscroll-behavior specification</a>.

Issue: The following does not take shadow dom into account.


<h3 id=key-presses>
Handling key presses</h3>

<div algorithm="react to key presses">

Issue: This should be a extension of [[!UI-EVENTS]]'s processing model
(or a monkey-patch over it if it were not extensible),
but [[UI-EVENTS]] does not have a fully defined processing model.
It does define the events, but does not define the algorithm which
is supposed to dispatch them and respond to cancelation and so on.
Therefore, this is being written as (a rough sketch of) what that
model should be.
Once this is sufficiently detailed and tested, this should be turned into
a pull request against [[UI-EVENTS]].

When the user presses a key on the keyboard,
the following steps are run to <dfn>react to key presses</dfn>.

1. Let <var>eventTarget</var> be the <a>DOM anchor</a> of the <a>currently focused area of a top-level browsing context</a>.
2. If <var>eventTarget</var> is the <a>Document</a> of the <a>top-level browsing context</a>
    set <var>eventTarget</var> to <a>the body element</a> if it is not <code>null</code> or
    to the <a>document element</a> otherwise.
3. <a>Fire an event</a> named <a event>keydown</a> at <var>eventTarget</var>
    using {{KeyboardEvent}} with its arguments initialized as per [[UI-EVENTS#event-type-keydown]]
    and let <var>actOnKeyPress</var> be the result.
4. If <var>actOnKeyPress</var> is <code>false</code>, return
5. If the element is an editing host or a descendent of one,
    or an <{textarea}> element,
    or an <{input}> element comprising a text control
    then…

    Issue: …invoke beforeinput events, execcommand, IMEs, input events, and numerous details…<br>
    However, a key point here is that if the caret is at the beggining (resp. end) of the content,
    and the user presses an arrow key to go up or left (resp. down or right),
    and there's no IME or similar thing consuming that key,
    then we should jump to point 9.1
6. Else if the key is .... and the modifiers are ..., then ....
7. Else if the key is enter and the target has an activation behavior,
    then initiate that action and then return
    <span class=issue>… more of the same, handling all sorts of keys in various situations …</span>
8. Else, if the {{KeyboardEvent/key}} is <code class=key>"Tab"</code>
    and all of {{KeyboardEvent/ctrlKey}}, {{KeyboardEvent/altKey}} and {{KeyboardEvent/metaKey}} are <code>false</code>,
    run the <a>navigation steps</a> on <var>eventTarget</var>
    in the <code>forward</code> direction if {{KeyboardEvent/shiftKey}} is <code>false</code>
    or in the <code>backward</code> direction if it is <code>true</code>,
    then return
9. Else, if the {{KeyboardEvent/key}} is one of <code class=key>"ArrowUp"</code>,<code class=key>"ArrowDown"</code>, <code class=key>"ArrowLeft"</code>, or <code class=key>"ArrowRight"</code>:
    1. Let <var>dir</var> be:
        * <code>up</code>    if the {{KeyboardEvent/key}} is <code class=key>"ArrowUp"</code>
        * <code>down</code>  if the {{KeyboardEvent/key}} is <code class=key>"ArrowDown"</code>
        * <code>left</code>  if the {{KeyboardEvent/key}} is <code class=key>"ArrowLeft"</code>
        * <code>right</code> if the {{KeyboardEvent/key}} is <code class=key>"ArrowRight"</code>

    2. If the target is a (form) control that reacts to arrow keys,
        do that then return

        Issue: define a nice hook so that elements can be specified to react to arrow keys
    3. Else, if <var>eventTarget</var> is a <a>scroll container</a> that <a>can be manually scrolled</a> in <var>dir</var>
        <a>directionally scroll the element</a> <var>eventTarget</var> in the direction <var>dir</var>
        then return.
    4. Else, if spatial navigation is <a for=spatnav>active</a>
        run the <a>navigation steps</a> on <var>eventTarget</var> in direction <var>dir</var>,
        then return
    5. Else, let <var>ancestor</var> be the nearest ancestor of <var>eventTarget</var> that is a <a>scroll container</a> that <a>can be scrolled manually</a>,
        including in <a>ancestor browsing contexts</a>,
        or <code>null</code> if no such element can be found.

        If <var>ancestor</var> is <code>null</code>,
        return,
        otherwise <a>directionally scroll the element</a> <var>ancestor</var> in the direction <var>dir</var>
        then return.

        Issue: This is how Chrome and Safari do it.
        Firefox only looks at the first ancestor of <var>eventTarget</var>,
        and if that cannot be manually scrolled,
        it stops there rather than look further up the ancestry chain.

</div>

<h3 id=scrolling>
Scrolling</h3>

<div algorithm>

Issue: Terminology like this should be in [[CSSOM-VIEW-1]], [[CSS-OVERFLOW-3]], [[CSS-SCROLL-SNAP-1]].

An element <var>e</var> <dfn lt="can be manually scrolled | can be scrolled manually | cannot be scrolled manually | cannot be manually scrolled">can be manually scrolled</dfn> in a given direction <var>d</var> if:
* The <a>principal box</a> established by <var>e</var> is a <a>scroll container</a>, and
* if <var>d</var> is <code>up</code> or <code>down</code>, the computed value of the 'overflow-y' property is not ''overflow/hidden'', and
* if <var>d</var> is <code>left</code> or <code>right</code>, the computed value of the 'overflow-x' property is not ''overflow/hidden'', and
* <var>e</var> is not at the <a>scroll boundary</a> in the direction <var>d</var>
* Issue: Take mandatory scroll snappoints into account

</div>

<div algorithm="to directionally scroll an element">

Issue: [[CSSOM-VIEW-1]] should probably define
how to perform a scroll in a given direction without an explicit position.
Until then, we roll our own.

To <dfn lt="directionally scroll an element | directionally scroll the element">directionally scroll an element</dfn> <var>e</var> in direction <var>dir</var>:

1. Let <var>d</var> be a User Agent defined distance.
2. Let <var>x</var> be <var>e</var>’s current scroll position on the x axis.
3. Let <var>y</var> be <var>e</var>’s current scroll position on the y axis.
4. Use the <a spec=CSSOM-VIEW-1>scroll an element</a> algorithm from [[!CSSOM-VIEW-1]] on <var>e</var> to
    * (<var>x</var>, <var>y</var> - <var>d</var>) if <var>dir</var> is <code>up</code>
    * (<var>x</var>, <var>y</var> + <var>d</var>) if <var>dir</var> is <code>down</code>
    * (<var>x</var> - <var>d</var>, <var>y</var>) if <var>dir</var> is <code>left</code>
    * (<var>x</var> + <var>d</var>, <var>y</var>) if <var>dir</var> is <code>right</code>

</div>

<h3 id=nav>
Navigation</h3>

<div algorithm="to run the navigation steps">
To run the <dfn>navigation steps</dfn> in <var>direction</var> on <var>eventTarget</var>, do the following:

If <var>direction</var> is <code>forward</code> or <code>backward</code>,
run step 1 through 9 of <a href="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">the HTML steps for sequential navigation</a>,
with one change:
between step 5 and 6, add the following:

> 5.5. if <var>candidate</var> is not <code>null</code>,
> <a>Fire an event</a> named <a event>navbeforefocus</a> at <var>eventTarget</var> using {{NavigationEvent}}
> with its {{NavigationEvent/dir}} set to <var>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>candidate</var>
> and return if the result is false
>
> Issue: This is a monkeypatch on [[HTML]].
> Eventually this should be upstreamed:
> modify the steps as described here,
> and give them a name (“the sequential navigation steps”?) so that they can be invoked.

Then, return.

Else (<a>assert</a>: <var>direction</var> is one of <code>up</code>, <code>down</code>, <code>left</code>, or <code>right</code>),
run the <a>spatial navigation steps</a> in <var>direction</var> on <var>eventTarget</var>.
</div>

<div algorithm="to run the spatial navigation steps">
To run the <dfn>spatial navigation steps</dfn> in <var>direction</var> on <var>eventTarget</var>, do the following:
1. Let <var>container</var> be the nearest ancestor of <var>eventTarget</var> that is a <a>spatnav container</a>.
2. <i>Loop</i>: Let <var>candidates</var> be the result of <a>finding candidates</a>
    within <var>container</var>
    in <var>direction</var>
    starting from <var>eventTarget</var>
3. If <var>candidates</var> is <code>null</code>:
    * If <var>container</var> is a <a>scroll container</a> that <a>can be manually scrolled</a>:
            1. <a>Fire an event</a> named <a event>navbeforescroll</a> at <var>eventTarget</var> using {{NavigationEvent}}
                with its {{NavigationEvent/dir}} set to <var>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>container</var>,
                and let <var>allowScroll</var> be the result.
            2. If <var>allowScroll</var> is <code>true</code>,
                then return <a>Directionally scroll the element</a> <var>container</var> in <var>direction</var> the return,
                else return.
    * Else,
        1. <a>Fire an event</a> named <a event>navnotarget</a> at <var>eventTarget</var> using {{NavigationEvent}}
            with its {{NavigationEvent/dir}} set to <var>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>container</var>,
            and return if the result is <code>false</code>.
        2.
            * If <var>container</var> is the <a>document element</a> of the <a>top-level browsing context</a>,
                then return.
                The User Agent may transfer focus to its own controls (if any) honouring <var>direction</var>.
            * Else, if <var>container</var> is the <a>document element</a> of a <a>nested browsing context</a> then:
                1. Set <var>eventTarget</var> to <var>container</var>'s <a>browsing context container</a>
                2. Set <var>container</var> to the nearest ancestor of <var>eventTarget</var> that is a <a>spatnav container</a>.
                3. Return to the step labeled <i>loop</i>.

                Issue: is it sane from a security standpoint that this propagates up from iframes?
            * Else, set <var>container</var> to its closest ancester that is itself a <a>spatnav container</a>
                and return to the step labeled <i>loop</i>.
2. Let <var>bestCandidate</var> be the result of <a>selecting the best candidate</a>
    within <var>candidates</var> in <var>direction</var> starting from <var>eventTarget</var>
3. <a>Fire an event</a> named <a event>navbeforefocus</a> at <var>eventTarget</var> using {{NavigationEvent}}
    with its {{NavigationEvent/dir}} set to <var>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>bestCandidate</var>,
    and let <var>allowFocusChange</var> be the result.
4. If <var>allowFocusChange</var> is <code>false</code>, return
5. Run the <a>focusing steps</a> for <var>bestCandidate</var> and return

</div>

<h3 id=heuristics>
Focus Navigation Heuristics</h3>

Note: The following algorithms are inspired from Chrome's implementation
as well as from the <a href="https://www.w3.org/TR/WICD/#focus-handling">old WICD Spec</a>.
Implementors who find better approaches or refinements to these approaches are strongly
encouraged to provide feedback and help improve this specification
in order to maximize interoperability.
In particular, divergences in how User Agents <a>find candidates</a>
may cause some elements to be focusable in some User Agents but not in others,
which would be bad for users.

<div algorithm="to find candidates">

To <dfn lt="find candidates | finding candidates">find candidates</dfn> within a <a>spatnav container</a> <var>C</var>,
in direction <var>D</var>,
starting from <var>starting point</var>,
follow the following steps:

1. Let <var>focusables</var> be the <a spec=infra for="/">set</a> of all the <a>focusable areas</a> that are descentants of <var>C</var>.
2. The UA should <a spec=infra for=set>remove</a> from <var>focusables</var> elements whose <a element-attr spec=html><code>tabindex</code></a> attribute is set to a negative value.

    Note: This is a "SHOULD" in order to mirror the exclusion of elements with negative tabindex
    from the <a>sequential focus navigation order</a> as defined in [[HTML#the-tabindex-attribute]].
3. Let <var>visibles</var> be the subset of the elements in <var>focusables</var>
    whose <a>border box</a>
    is at least partly within the <var>C</var>'s <a>scrollport</a>.

    Issue: CSS should have a term for “border box taking into account corner shaping properties like border-radius”.

    Issue: Should that be C's <a>optimal viewing region</a> instead?
    Probably not, given the next step, but maybe.
4. Remove from <var>visibles</var> elements are <a>obscured</a> by another element:
    If an element could be be hit by a hit test due to some other element(s) overlapping it,
    it is said to be <dfn>obscured</dfn>.

    Note: Spatial navigation is often an afterthough for many web authors,
    if it is remembered at all.
    If elements which cannot be focused or activated clicking / pointing
    could be focused by spatial navigation,
    there would be a risk that activating them would violate the author's assumptions
    of what events can happen in certain states of the web page.
    For instance, if the submit button of a form can be focused and activated even though
    there is a dialog over it,
    this may cause a bug in the application.
    While careful authors should use the inert attribute (or similar practices) to prevent such problems,
    but this specification aims to make spatial navigation robust even in the eventuality
    that authors forget to do so.

    Issue: Some CSS spec needs to define hit testing.
5. Let <var>candidates</var> be the subset of the elements in <var>visibles</var>
    whose <a>principal box</a>'s geometric center is within the closed half plane
    whose boundary goes through the geometric center of <var>starting point</var>
    and is perpendicular to <var>D</var>.
6. Return <var>candidates</var>.

    Note: <var>candidates</var> may be <code>null</code>.

</div>

<div algorithm="to select the best candidate">

To <dfn lt="select the best candidate | selecting the best candidate">select the best candidate</dfn>
within a <a spec=infra for="/">set</a> of <var>candidates</var>
in direction <var>dir</var>,
starting from <var>starting point</var>,
follow the following steps:

1. If <var>candidates</var> is <a spec=infra for=set>empty</a>, return <code>null</code>
2. If <var>candidates</var> contains a single item, return that item
3. For each <var>candidate</var> in <var>candidates</var>,
    find the points <var>P1</var> inside the <a>border box</a> of <var>starting point</var>
    and <var>P2</var> inside the <a>border box</a> of <var>candidate</var>
    that minimize the <var>distance</var> between these two points,
    when <var>distance</var> is defined as follows:

    <dl>
      <dt><var>distance</var>:
        <dd><var>A</var> + <var>B</var> + <var>C</var> - <var>D</var>

      <dt><var>A</var>:
        <dd>The euclidian distance between <var>P1</var> and <var>P2</var>.

      <dt><var>B</var>:
        <dd>The absolute distance in the <var>dir</var> direction between <var>P1</var> and <var>P2</var>.

      <dt><var>C</var>:
        <dd>The absolute distance in the direction which is orthogonal to <var>dir</var> between <var>P1</var> and <var>P2</var>.

      <dt><var>D</var>:
        <dd>The square root of the area of intersection between the <a>border boxes</a> of <var>candidate</var> and <var>starting point</var>
    </dl>
4. Return the item of the <var>candidates</var> set that has the smallest <var>distance</var>

</div>
